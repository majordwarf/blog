<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="/author/majordwarf/feed.xml" rel="self" type="application/atom+xml" />
  <link href="/" rel="alternate" type="text/html" />
  <updated>2020-05-07T01:43:54+00:00</updated>
  <id>/author/majordwarf/feed.xml</id>

  
  
  

  
    <title type="html">majordwarf‚Äôs blog | </title>
  

  
    <subtitle>Code. Coffee. Repeat.</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">Hello World! üöÄ</title>
      <link href="/hello-world" rel="alternate" type="text/html" title="Hello World! üöÄ" />
      <published>2020-05-06T12:00:00+00:00</published>
      <updated>2020-05-06T12:00:00+00:00</updated>
      <id>/hello-world</id>
      <content type="html" xml:base="/hello-world">&lt;p&gt;Hello! Is this thing even on? testing 1..2..3..mic check&lt;/p&gt;

&lt;p&gt;Alright! restarted the blog again using Jekyll! Will keep up with my experiences through GSoC, projects I work on and hopefully some other stuff. Will work on porting my older post to this new blog over time.&lt;/p&gt;

&lt;p&gt;Stay tuned!&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Tejas Tank</name>
        
        
      </author>

      

      
        <category term="updates" />
      

      
        <summary type="html">Hello! Is this thing even on? testing 1..2..3..mic check</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">Getting Started With Git And GitHub üêô</title>
      <link href="/git-n-github" rel="alternate" type="text/html" title="Getting Started With Git And GitHub üêô" />
      <published>2020-05-06T12:00:00+00:00</published>
      <updated>2020-05-06T12:00:00+00:00</updated>
      <id>/git-n-github</id>
      <content type="html" xml:base="/git-n-github">&lt;h1 id=&quot;introduction-to-git-and-github&quot;&gt;Introduction To Git and GitHub&lt;/h1&gt;

&lt;p&gt;Git is the most popular software to maintain multiple versions of your code and is one of the tools essential for software development in the industry. On the other hand, GitHub is a code hosting platform for collaboration and version control. This is a tool without which you don‚Äôt want to be.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;what-is-git&quot;&gt;What is Git?&lt;/h2&gt;

&lt;p&gt;Considering you are a complete outsider, imagine you and your friends are working on a research paper. You start writing the introduction in a word file, now one of your friends enters the room and says, ‚ÄúHey, I got some new research data that could improve our paper!‚Äù So, now he continues writing on the same document on the same laptop. Now after weeks of such collaboration and multiple changes by friends, you find some inconsistencies in the paper, and you don‚Äôt remember who made which changes.&lt;/p&gt;

&lt;p&gt;Collaborating in such an environment can cause issues to imagine the same case in the world of software development, where multiple files are being changed continuously by different programmers and that too simultaneously! This is where a Version Control System (VCS) comes into the play it provides features such as collaboration between different users, managing different versions of the source code, keeping track of all the changes, who did it, when, and why.&lt;/p&gt;

&lt;p&gt;Git isn‚Äôt the only VCS out there but is one of the widely used and is a distributed version control system. The ‚Äúdistributed‚Äù part refers to the section that allows users to collaborate on the same project on the different system remotely irrespective of their operating system.&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;installing-git&quot;&gt;Installing Git&lt;/h2&gt;

&lt;p&gt;Git comes installed by default on many systems. If you don‚Äôt already have it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can download the Git Command Line Interface (CLI) from their &lt;a href=&quot;https://git-scm.com/downloads&quot;&gt;official website&lt;/a&gt;, which is one of the recommended ways for both new and advance users.&lt;/li&gt;
  &lt;li&gt;You can also download the GUI Client from their &lt;a href=&quot;https://desktop.github.com/&quot;&gt;official website&lt;/a&gt; too, but currently, it‚Äôs only available for Windows and macOS.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gitkraken.com/git-client&quot;&gt;Git Kraken&lt;/a&gt; is one of the third-party GUI Client that is recommended widely.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;setting-up-git&quot;&gt;Setting Up Git&lt;/h2&gt;

&lt;p&gt;Once git is installed on your system, you need to check if it‚Äôs working correctly. That can be done typing the following command in the Git Bash(Windows) or inside the Terminal (UNIX/Linux):&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;git version 2.20.1 // Latest version during the time of writing this article.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If the above command doesn‚Äôt return a version number probably git isn‚Äôt installed correctly on your system.&lt;/p&gt;

&lt;p&gt;After git is set-up properly, it‚Äôs time to set-up your username and email id for git to use system-wide. Remember how git keeps the log of who made the changes? This username and email you‚Äôll provide now will be used to sign every commit made by you. These need to be the same as your GitHub username and email id to keep track of all the contributions you do on GitHub. You can set-up your username and email as follow:&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.name &amp;lt;username&amp;gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git config &lt;span class=&quot;nt&quot;&gt;--global&lt;/span&gt; user.email &amp;lt;email&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Did you notice the &lt;code class=&quot;highlighter-rouge&quot;&gt;--global&lt;/code&gt; argument above? That states that you want that username and email to be used for any future commit you made on any git repository on the system.&lt;/p&gt;

&lt;p&gt;If you want to override the following information for a particular repository, just &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; used into that repository and perform the same command eliminating the &lt;code class=&quot;highlighter-rouge&quot;&gt;--global&lt;/code&gt; argument, and you‚Äôre good to go!&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;commands&quot;&gt;Commands&lt;/h2&gt;
&lt;p&gt;Now let‚Äôs learn a few commands that we‚Äôll be using throughout our &lt;em&gt;WHOLE LIVES!&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Make your repository&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Command: git init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The following folder will create a hidden .git folder inside the current working directory that will track all the changes made to any file inside this folder -this is the ‚Äúrepository‚Äù (or repo) where git stores all of its internal tracking data. You neither will interact with the following folder nor will delete it. Any existing project or even an empty project can be turned into a git repository.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Forking someone‚Äôs repository&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You don‚Äôt have write access to someone‚Äôs repository on GitHub. Forks are the way of getting a copy of the latest code under your GitHub id so you can write new changes to it and modify it as you need.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Clone a repository&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Command: git clone &amp;lt;url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That will download the latest git repository from the specified URL on your local system. A folder with the same name as the repository will be created, and all the data will be fetched inside this directory.&lt;/p&gt;

&lt;p&gt;When you clone a repository, the source from where you got the repository will be added as the remote origin. We‚Äôll look into what remotes are soon!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Check status of your project&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Command: git status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will show the current status of the project, like how many commits we are ahead of remotes, which files are modified, which files are tracked and other basic information. If you are confused at some point in whether you changed something by mistake, you can always check the status of the project.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Branching out stuff!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Commands: 
git branch // To list all the branches in current repo
git branch &amp;lt;branch_name&amp;gt; // Creates a branch with the specified name
git branch -d &amp;lt;branch_name&amp;gt; // Deletes the branch specified if it exists
git checkout &amp;lt;branch_name&amp;gt; // Switch to the branch specified

git checkout -b &amp;lt;branch_name&amp;gt; // Creates a new branch and switches to it automatically
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Branches, as the name suggests, creates a new branch of your code that is separate from your master branch, so you can write and test all the experimental features you need in your app with messing with the stable version of your code. Once everything seems working fine, you can merge these new features into the master branch avoiding all the paths in which your user would have faced some app crash.&lt;/p&gt;

&lt;p&gt;Branches are generally used to fix bugs, add new features, test something experimental. So, even if anything goes wrong, you can delete the branch or reset it to the old working version, i.e.- master branch. When you list all the branches using the &lt;code class=&quot;highlighter-rouge&quot;&gt;git branch&lt;/code&gt; command, the branch with &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; (asterisk) in front of its name states the current branch.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Stage your changes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Commands:
git add &amp;lt;filename&amp;gt; // To track a particular file
git add * // To track all the new and modified files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Git doesn‚Äôt know which files you want to include in the next version/commit of your code. So after making the changes and before telling git to make a new checkpoint, you need to tell it which files you want to include in the ‚Äústagging‚Äù area (or ‚Äúready to be committed‚Äù).&lt;/p&gt;

&lt;p&gt;After stagging some changes, if you go and make new changes even to the same files, the new changes won‚Äôt be tracked. This is useful to make sure what you‚Äôre committing and not including. If confused, which files are tracked and which aren‚Äôt you can check the status of the repository. Files to be committed will be displayed in ‚Äúgreen‚Äù and files which aren‚Äôt being tracked will be displayed in ‚Äúred‚Äù color.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Committing your staged changes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Commands:
git commit // To write a commit with a multiline message
git commit -m &quot;&amp;lt;message&amp;gt;&quot; // To write a small commit message
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So once you‚Äôve made changes to the project you need, you‚Äôll need to make sure that changes are stored permanently as a checkpoint. The following is done by committing the staged changes using the commit command. You‚Äôll also need to pass a message along with the commit so you or someone else collaborating on the project can come to know what changes were made and why.&lt;/p&gt;

&lt;p&gt;Each commits automatically stores data like the username and email of the person who made the changes, timestamp, and message of the commit and assigns it a unique hashed string.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Remotes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Commands:
git remote -v // Lists all remote with their endpoint url
git remote add &amp;lt;remote_name&amp;gt; &amp;lt;url&amp;gt; // Adds the URL as a new remote with the specified name to that repository
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So remotes are the place where you want to pull the changes or even push your latest changes. So whenever you make some change to someone else‚Äôs repository using a branch and that changes are merged in his master branch, your local master branch is not in sync with the latest update. You can update your local code by pulling the changes from the master branch of that remote.&lt;/p&gt;

&lt;p&gt;Remotes are also used to test changes from someone‚Äôs changes. Suppose someone made a fork of your code and is working on some new feature, in case you want to experiment that changes, you add that repository as a new remote and pull the changes or branch locally to test them. In short, remotes can be explained as endpoints to keeping code in sync.&lt;/p&gt;

&lt;p&gt;If you make a new repository and want to upload the code to GitHub, create an empty repository on GitHub, add the URL of that repository as a remote, and then push the changes.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Pushing the changes somewhere&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Command: git push &amp;lt;remote_name&amp;gt; &amp;lt;branch_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pushing changes uploads your changes of a branch to the remote you specified to keep your code on the server/GitHub up-to-date.&lt;/p&gt;

&lt;p&gt;After pushing the changes successfully, your team members will be able to pull the latest changes locally on their system.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Getting the latest changes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Commands:
git fetch --all // Fetches all the latest changes and branches from all the remotes
git pull &amp;lt;remote_name&amp;gt; &amp;lt;branch_name&amp;gt; // Fetches the latest changes from the branch of specified remote
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;git fetch&lt;/code&gt; command fetches all the changes from remotes that are specified and store all the updates in &lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt; folder but you‚Äôll still be on the checkpoint you were earlier. You‚Äôll need to merge all the latest changes or the branch you need manually.&lt;/p&gt;

&lt;p&gt;To avoid this, use the &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt; command that fetches and merges the changes all in one step. So &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull origin master&lt;/code&gt; will pull the changes that exist in the ‚Äúmaster‚Äù branch of the remote ‚Äúorigin‚Äù and merge it into the current local branch you‚Äôre on.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Conflicts!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Suppose you try to pull some changes from a remote and there are some changes made by someone on the same line as you on the same file this will cause a merge conflict as git isn‚Äôt that smart to know what changes are right for the code. In this case, git asks you to choose what is right and make a new commit. Once there is a conflict, the conflict causing file modified by git and waits for a commit.&lt;/p&gt;

&lt;p&gt;Content of conflicting file looks like this:&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HEAD&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=======&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;384&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dcc1ac63b820c34684354896737ed1ae3f7f6&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here everything between &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; HEAD&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;=======&lt;/code&gt; are the changes made by you and everything between &lt;code class=&quot;highlighter-rouge&quot;&gt;=======&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; 384dcc1ac63b820c34684354896737ed1ae3f7f6&lt;/code&gt; (the random string is the commit id of the remote change) is the change that existed on the remote. Suppose you want your local change to be the final change then you‚Äôll erase the other content that was generated by git, the final file will look like this,&lt;/p&gt;
&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now you‚Äôll track the file you just changed and make a new commit stating a suitable message, e.g.-&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add *
git commit -m &quot;Fix merge conflict&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;Now you know everything you‚Äôll ever need to begin and contribute to open-source or even start working on your next big project and maintaining it‚Äôs code! There are some other small things that we‚Äôll be covering in future workshops. If you want to practice what you have learned today, we‚Äôve made three small tasks - &lt;a href=&quot;https://github.com/devclub-workshops/Git-Workshop-Tasks&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope you had fun and learnt something cool!&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Tejas Tank</name>
        
        
      </author>

      

      
        <category term="guide" />
      

      
        <summary type="html">Introduction To Git and GitHub</summary>
      

      
      
    </entry>
  
</feed>
